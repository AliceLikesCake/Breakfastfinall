@model List<BreakfastOrderSystem.Site.Models.ViewModels.OrderlistVm>

@{
    ViewBag.Title = "Orderlist";
}

<style>
    /* 隐藏默认的复选框 */
    .form-check-input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
    }

    /* 创建自定义复选框框架 */
    .form-check-label {
        position: relative;
        padding-left: 30px;
        cursor: pointer;
    }

        /* 定义复选框的样式 */
        .form-check-label:before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 20px;
            height: 20px;
            border: 2px solid #007bff; /* 边框颜色 */
            border-radius: 4px; /* 圆角效果 */
            background-color: white; /* 背景色 */
        }

    /* 当复选框被选中时的样式 */
    .form-check-input:checked + .form-check-label:before {
        background-color: #007bff; /* 选中时的背景颜色 */
        border-color: #007bff; /* 选中时的边框颜色 */
    }

    /* 显示打勾符号 */
    .form-check-input:checked + .form-check-label:after {
        content: "\2713"; /* 勾选符号 */
        position: absolute;
        top: 0px;
        left: 4px;
        font-size: 18px;
        color: white; /* 勾选符号颜色 */
    }
</style>
<h2 class="fw-bold mt-2 mb-2">訂單列表</h2>

<div class="container" style="background-color: white; padding: 20px; border-radius: 8px; display: flex; flex-direction: column; min-height: 400px;">
    <div class="row mb-1">
        <div class="col-12">
            <div class="d-flex align-items-center flex-wrap" style="gap: 1rem;">
                <!-- 左側的下拉選單 -->
                <div class="dropdown me-2">
                    <a class="btn btn-light dropdown-toggle" href="#" role="button" id="statusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        訂單狀態
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="statusDropdown">
                        <li><a class="dropdown-item" href="#" data-value="1">未取餐</a></li>
                        <li><a class="dropdown-item" href="#" data-value="2">已取餐</a></li>
                        <li><a class="dropdown-item" href="#" data-value="3">已取消</a></li>
                        <li><a class="dropdown-item" href="#" data-value="4">已棄單</a></li>
                    </ul>
                </div>

                <!-- 開始日期 -->
                <div class="d-flex align-items-center me-2">
                    <label for="startDate" class="mb-0 me-1" style="margin-right: 0.5rem;">開始日期: </label>
                    <input type="date" id="startDate" class="form-control" aria-label="Start Date" style="flex: 1;">
                </div>

                <!-- 結束日期 -->
                <div class="d-flex align-items-center me-2">
                    <label for="endDate" class="mb-0 me-1" style="margin-right: 0.5rem;">結束日期: </label>
                    <input type="date" id="endDate" class="form-control" aria-label="End Date" style="flex: 1;">
                </div>

                <!-- 搜尋 -->
                <button class="custom-btn" id="searchButton" type="button" onclick="handleSearch()">搜尋</button>
            </div>
        </div>
    </div>

    <div class="flex-grow-1">
        <table class="custom-table" style="table-layout: fixed; width: 100%;">
            <thead>
                <tr>
                    <th scope="col">訂單編號</th>
                    <th scope="col">下單時間</th>
                    <th scope="col">取餐時間</th>
                    <th scope="col">總金額</th>
                    <th scope="col">訂單狀態</th>
                    <th scope="col">會員名稱</th>
                    <th scope="col">操作</th>
                </tr>
            </thead>
            <tbody id="orderTableBody">
                <!-- Rows will be inserted here -->
            </tbody>
        </table>
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination" id="pagination">
            <!-- 分頁按鈕將由 JavaScript 動態填充 -->
        </ul>
    </nav>
</div>

<!-- Modal for Order Details -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <!-- 確保使用 modal-xl 放大彈出視窗 -->
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="orderDetailModalLabel">訂單明細</h3>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <!-- 第一行：訂單編號和會員名稱 -->
                    <div class="blacklist-container">
                        <input class="form-check-input" type="checkbox" id="blacklistCheckbox" onchange="toggleBlacklist()">
                        <label class="form-check-label" for="blacklistCheckbox">黑名單</label>
                    </div>
                    <div class="row mb-3">
                        <!-- 訂單編號 (左上) -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <label for="modalOrderId" class="form-label me-3" style="white-space: nowrap;">訂單編號:</label> <!-- 加入 white-space: nowrap; -->
                                <input type="text" class="form-control" id="modalOrderId" readonly>
                            </div>
                        </div>
                        <!-- 會員名稱 (右上) -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <label for="modalMemberName" class="form-label me-3" style="white-space: nowrap;">會員名稱:</label> <!-- 加入 white-space: nowrap; -->
                                <input type="text" class="form-control" id="modalMemberName" readonly>

                            </div>
                        </div>
                    </div>

                    <!-- 第二行：訂單金額和點數折抵 -->
                    <div class="row mb-3">
                        <!-- 訂單金額 (左下) -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <label for="modalTotalPrice" class="form-label me-3" style="white-space: nowrap;">訂單金額:</label> <!-- 加入 white-space: nowrap; -->
                                <input type="text" class="form-control" id="modalTotalPrice" readonly>
                            </div>
                        </div>
                        <!-- 點數折抵 (右下) -->
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <label for="modalUsedPoints" class="form-label me-3" style="white-space: nowrap;">點數折抵:</label> <!-- 加入 white-space: nowrap; -->
                                <input type="text" class="form-control" id="modalUsedPoints" readonly>
                            </div>
                        </div>
                    </div>

                    <!-- 訂單品項表格 -->
                    <h4 class="mt-4">訂單品項：</h4>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th scope="col">商品名稱</th>
                                <th scope="col">單價</th>
                                <th scope="col">數量</th>
                                <th scope="col">加選資訊</th>
                                <th scope="col">小計</th>
                            </tr>
                        </thead>
                        <tbody id="modalOrderItems">
                            <!-- Rows will be inserted here dynamically -->
                        </tbody>
                    </table>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
            </div>
        </div>
    </div>
</div>

<style>
    /* **************************************分頁項的基本樣式 *************************************************************/
    .page-item {
        display: inline-block;
        margin: 0 5px; /* 每個分頁按鈕之間的間距 */
    }

    /* 分頁鏈接的基本樣式 */
    .page-link {
        display: block;
        /*padding: 8px 12px;*/ /* 調整內邊距，讓按鈕更大一些 */
        background-color: #DFF3EC; /* 淡綠色背景 */
        color: #333; /* 文字顏色 */
        border-radius: 5px; /* 圓角 */
        text-decoration: none; /* 去除默認的下劃線 */
        font-weight: bold;
        transition: background-color 0.3s ease, color 0.3s ease; /* 添加過渡效果 */
    }

    /* 當前頁面的樣式 */
    .page-item.active .page-link {
        background-color: #499e73; /* 深綠色背景 */
        color: white; /* 白色文字 */
        cursor: default; /* 當前頁面不允許點擊 */
        border: none !important;
    }

    /* 分頁鏈接的懸停樣式 */
    .page-link:hover {
        background-color: #74c69d; /* 懸停時的顏色 */
        color: white;
    }

    /* 禁用上一頁/下一頁時的樣式 */
    .page-item.disabled .page-link {
        background-color: #f0f0f0; /* 灰色背景 */
        color: #ccc; /* 灰色文字 */
        cursor: not-allowed; /* 禁用的鼠標樣式 */
    }

    .pagination {
        position: fixed;
        bottom: 60px; /* 距離底部 20px */
        left: 55%; /* 使其相對於頁面水平居中 */
        transform: translateX(-50%); /* 偏移自身寬度的一半，達到真正居中效果 */
        z-index: 1000; /* 確保分頁按鈕位於其他元素之上 */
        /*background-color: #f8f9fa;*/ /* 背景顏色 */
        padding: 10px 20px;
        border-radius: 5px; /* 圓角 */
        /*box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);*/ /* 添加陰影效果 */
    }
    /* *************************************************表格樣式 ***********************************************************/
    table.custom-table {
        width: 100%; /* 表格寬度全屏 */
        border-collapse: collapse; /* 去除單元格邊距 */
        margin-top: 20px;
    }

        table.custom-table th,
        table.custom-table td {
            border: 1px solid #ddd; /* 輕微的灰色邊框 */
            padding: 12px; /* 單元格內的填充 */
            text-align: center; /* 內容居中 */
            vertical-align: middle; /* 垂直居中 */
            align-content: center;
        }

        /* 表頭樣式 */
        table.custom-table th {
            background-color: #74C69D; /* 使用綠色作為背景色 */
            color: white; /* 白色文字 */
            font-weight: bold;
            text-transform: uppercase; /* 表頭大寫 */
        }

        /* 表格行背景 */
        table.custom-table tbody tr:nth-child(even) {
            background-color: #f9f9f9; /* 偶數行使用淡灰色 */
        }

        /* 懸停效果 */
        table.custom-table tbody tr:hover {
            background-color: #eff4f2; /* 懸停時使用非常淺的綠色 */
        }

        /* 圖片樣式 */
        table.custom-table img {
            width: 50px;
            height: auto;
            border-radius: 5px; /* 圖片圓角 */
        }
    /* 表格懸停效果 */
    tr:hover {
        background-color: #DFF3EC; /* 使用非常淺的綠色 */
    }

    /* 懸停時表格行的背景顏色變化 */
    tr:hover {
        background-color: #f9f9f9;
    }

    /* 表格標題的樣式 */
    th {
        background-color: #5fae87;
        color: white;
        font-weight: bold;
        text-transform: uppercase;
    }

    /* 針對小型螢幕的響應式設計 */
    @@media (max-width: 768px) {
        table {
            font-size: 12px;
        }

        a.btn {
            padding: 6px 10px;
        }
    }

    /*****************************************按扭樣式******************************************/
    /* 通用按鈕樣式 */
    .custom-btn {
        display: inline-block;
        padding: 8px 15px;
        border-radius: 5px;
        text-decoration: none;
        font-size: 14px;
        font-weight: bold;
        color: white;
        margin-right: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
        /*display: inline-flex;*/ /* 讓圖標和文字水平對齊 */
        align-items: center; /* 讓文字居中對齊 */
        justify-content: center; /* 讓文字在按鈕中間水平居中 */
    }


        /* 懸停效果 */
        .custom-btn:hover {
            background-color: #499e73; /* 懸停時使用更深的綠色 */
            transform: translateY(-2px); /* 懸停時按鈕輕微上移 */
        }

    #searchButton {
        background-color: #f1f1f1; /* 使用綠色作為背景色 */
        color: dimgrey; /* 文字顏色為白色 */
        border: #74C69D; /* 使用深綠色作為邊框 */
    }

    /************************************解除封鎖樣式******************************************/
    .custom-edit-btn {
        background-color: #74c69d; /* 淡綠色 */
        color: white; /* 白色字體 */
        border: none; /* 無邊框 */
        padding: 8px 16px; /* 調整內邊距 */
        border-radius: 5px; /* 圓角 */
        font-size: 16px;
        cursor: pointer; /* 鼠標移到按鈕上時變成手指 */
        transition: all 0.3s ease; /* 過渡效果 */
        text-decoration: none; /* 移除超連結的下劃線 */
    }

        .custom-edit-btn:hover {
            background-color: #499e73; /* 深綠色背景 */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); /* 陰影效果 */
            color: white;
        }

        .custom-edit-btn i {
            margin-right: 5px; /* 調整圖標與文字的距離 */
        }
    /***************************************model樣式****************************************************/
    .modal-title {
        font-weight: bolder;
    }

    .required {
        color: red; /* 將 * 標記設置為紅色 */
        font-weight: bold; /* 加粗以示強調 */
    }

    .modal-style {
        border: 3px solid #999999;
    }

    .modal-dialog {
        max-width: 70%;
    }

    .modal-content {
        border: 20px solid #c7d1cc !important;
        padding: 20px;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    .form-label-custom {
        text-align: left;
        font-weight: bold;
        margin-right: 10px;
        display: inline-block;
    }

    input[type="text"], select, .form-control {
        background-color: #f8f9fa; /* 淡灰色背景 */
        border: 1px solid #ccc; /* 灰色邊框 */
        border-radius: 5px;
        padding: 10px;
        font-size: 16px;
        width: 100%; /* 占滿寬度 */
        transition: all 0.3s ease;
    }

        input[type="text"]:focus, select:focus, .form-control:focus {
            border-color: #499e73; /* 聚焦時變成深綠色邊框 */
            outline: none;
            box-shadow: 0 0 10px rgba(73, 158, 115, 0.5);
        }

    button, .btn-secondary, .btn-add {
        background-color: #74c69d; /* 淡綠色背景 */
        color: white; /* 白色字體 */
        border: none; /* 無邊框 */
        padding: 10px 20px; /* 調整內邊距 */
        border-radius: 5px; /* 圓角 */
        font-size: 16px;
        cursor: pointer; /* 鼠標移到按鈕上時變成手指 */
        transition: all 0.3s ease; /* 添加過渡效果 */
    }

        button:hover, .btn-secondary:hover, .btn-add:hover {
            background-color: #499e73; /* 深綠色背景 */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); /* 添加陰影 */
        }

        button:disabled, .btn-secondary:disabled, .btn-add:disabled {
            background-color: #cdcdcd; /* 灰色背景 */
            color: #999; /* 字體變灰 */
            cursor: not-allowed;
        }

    .table {
        width: 100%;
        background-color: white;
        border-collapse: collapse;
        border: 1px solid #dee2e6;
    }

        .table th, .table td {
            padding: 12px;
            text-align: center;
            border: 1px solid #dee2e6;
        }

        .table th {
            background-color: #5fae87;
            color: white;
        }

        .table tbody tr:nth-child(even) {
            background-color: #f8f9fa;
        }

    h4 {
        font-size: 1.5rem;
        font-weight: bold;
        color: #499e73;
    }

    /**************************************** 黑名單區域的樣式**************************************/

    .blacklist-container {
        display: flex; /* 使 checkbox 和文字水平排列 */
        align-items: center; /* 垂直居中 */
        margin-bottom: 10px; /* 適當的左邊距離調整 */
    }

        .blacklist-container input[type="checkbox"] {
            margin-right: 5px; /* 調整 checkbox 與文字的間距 */
        }

    .form-check-label {
        font-weight: bold;
    }
</style>



@section Scripts {
    <script>
        // 將 Razor 模型數據序列化為 JavaScript 對象
        let initialOrders = @Html.Raw(Json.Encode(Model));
        let allOrders = [...initialOrders]; // 創建一個副本來進行後續操作
        let currentPage = 1;
        const ITEMS_PER_PAGE = 4;
        const MAX_PAGE_DISPLAY = 5;
        let selectedStatus = ""; // 用於儲存選擇的訂單狀態

        // 更新選擇的訂單狀態
        document.querySelectorAll('.dropdown-item').forEach(item => {
            item.addEventListener('click', function () {
                selectedStatus = this.getAttribute('data-value'); // 取得選擇的狀態
                document.getElementById('statusDropdown').textContent = this.textContent; // 更新顯示文字
                handleSearch(); // 觸發篩選
            });
        });

        function renderTable() {
            const tbody = document.getElementById("orderTableBody");
            tbody.innerHTML = ""; // 清空現有的表格內容

            const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;
            const currentOrders = allOrders.slice(startIndex, endIndex);

            currentOrders.forEach((order) => {
                const row = document.createElement("tr");

                row.innerHTML = `
                    <td>${order.OrderId}</td>
                    <td>${formatDate(order.OrderTime)}</td>
                    <td>${formatDate(order.PickUpTime)}</td>
                    <td>${order.TotalPrice}</td>
                    <td>${getOrderStatusText(order.OrderStatus)}</td> <!-- 使用狀態轉換函數 -->
                    <td>${order.MemberName}</td>
                    <td>
                      <a class="btn custom-edit-btn edit-btn" href="#!" role="button" data-order-id="${order.OrderId}">
                        <i class="fa-solid fa-circle-info"></i> 明細
                      </a>
                    </td>
                `;
                tbody.appendChild(row);
            });

            // 綁定明細按鈕的事件處理函數
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const orderId = this.getAttribute('data-order-id');
                    showOrderDetails(orderId); // 顯示訂單明細的函數
                });
            });
        }

        // 顯示訂單明細
            function showOrderDetails(orderId) {
                $.ajax({
                    url: '@Url.Action("GetOrderDetails", "Orderlist")', // 調用控制器的 GetOrderDetails 方法
                    type: 'GET',
                    data: { orderId: orderId },
                    success: function (response) {
                        if (response.success) {
                            // 填充訂單編號、會員名稱、訂單金額、點數折抵
                            $('#modalOrderId').val(response.data.OrderId);
                            $('#modalMemberName').val(response.data.MemberName);
                            $('#modalMemberName').data('member-id', response.data.MemberID);  // 將MemberID保存在data屬性中
                            $('#modalTotalPrice').val(response.data.TotalPrice);
                            $('#modalUsedPoints').val(response.data.UsedPoints);

                            // 根据黑名单状态设置复选框状态
                            $('#blacklistCheckbox').prop('checked', response.data.IsBlacklisted);


                            // 清空之前的表格
                            const tbody = $("#modalOrderItems");
                            tbody.empty();

                            // 遍歷訂單項目並新增到表格中
                            response.data.Items.forEach(item => {
                                let addOnInfo = item.AddOnInfo.length > 0 ? item.AddOnInfo.map(a => `${a.AddOnName}`).join(', ') : '不選';
                                let addOnQuantity = item.AddOnInfo.length > 0 ? item.AddOnInfo.map(a => a.AddOnQuantity).join(', ') : '-';

                                tbody.append(`
                                    <tr>
                                        <td>${item.ProductName}</td>
                                        <td>${item.Price}</td>
                                        <td>${item.Quantity}</td>
                                        <td>${addOnInfo}</td>
                                        <td>${item.Subtotal}</td>
                                    </tr>
                                `);
                            });

                            // 顯示模態視窗
                            $('#orderDetailModal').modal('show');
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error(xhr, status, error);
                        alert('獲取訂單明細時發生錯誤');
                    }
                });
            }


        // 狀態轉換函數
        function getOrderStatusText(status) {
            switch (status) {
                case 1:
                    return "未取餐";
                case 2:
                    return "已取餐";
                case 3:
                    return "已取消";
                case 4:
                    return "已棄單";
                default:
                    return "未知狀態";
            }
        }

        function renderPagination() {
            const pagination = document.getElementById("pagination");
            pagination.innerHTML = ""; // 清空現有的分頁

            const totalPages = Math.ceil(allOrders.length / ITEMS_PER_PAGE);
            if (totalPages === 0) return;

            let startPage = 1;
            let endPage = totalPages;

            if (totalPages > MAX_PAGE_DISPLAY) {
                if (currentPage <= Math.floor(MAX_PAGE_DISPLAY / 2)) {
                    startPage = 1;
                    endPage = MAX_PAGE_DISPLAY;
                } else if (currentPage + Math.floor(MAX_PAGE_DISPLAY / 2) >= totalPages) {
                    startPage = totalPages - MAX_PAGE_DISPLAY + 1;
                    endPage = totalPages;
                } else {
                    startPage = currentPage - Math.floor(MAX_PAGE_DISPLAY / 2);
                    endPage = currentPage + Math.floor(MAX_PAGE_DISPLAY / 2);
                }
            }

            const prevLi = document.createElement("li");
            prevLi.className = "page-item" + (currentPage === 1 ? " disabled" : "");
            prevLi.innerHTML = `
                <a class="page-link" href="#" aria-label="Previous">
                  <span aria-hidden="true">&laquo;</span>
                </a>
            `;
            prevLi.addEventListener("click", function (e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    updatePagination();
                }
            });
            pagination.appendChild(prevLi);

            for (let i = startPage; i <= endPage; i++) {
                const pageLi = document.createElement("li");
                pageLi.className = "page-item" + (i === currentPage ? " active" : "");
                pageLi.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pageLi.addEventListener("click", function (e) {
                    e.preventDefault();
                    currentPage = i;
                    updatePagination();
                });
                pagination.appendChild(pageLi);
            }

            const nextLi = document.createElement("li");
            nextLi.className = "page-item" + (currentPage === totalPages ? " disabled" : "");
            nextLi.innerHTML = `
                <a class="page-link" href="#" aria-label="Next">
                  <span aria-hidden="true">&raquo;</span>
                </a>
            `;
            nextLi.addEventListener("click", function (e) {
                e.preventDefault();
                if (currentPage < totalPages) {
                    currentPage++;
                    updatePagination();
                }
            });
            pagination.appendChild(nextLi);
        }

        function updatePagination() {
            renderTable();
            renderPagination();
        }

        function handleSearch() {
            const startDate = document.getElementById("startDate").value;
            const endDate = document.getElementById("endDate").value;

            let filteredOrders = [...initialOrders];

            // 如果選擇了訂單狀態，進行篩選
            if (selectedStatus) {
                filteredOrders = filteredOrders.filter((order) => order.OrderStatus == selectedStatus); // 狀態是數字，這裡使用 "=="
            }

            // 篩選日期範圍，包含開始日期和結束日期
            if (startDate || endDate) {
                const start = startDate ? new Date(startDate) : null;
                const end = endDate ? new Date(endDate) : null;

                filteredOrders = filteredOrders.filter((order) => {
                    const orderDate = new Date(parseInt(order.OrderTime.match(/\d+/)[0], 10));

                    const isAfterStart = !start || orderDate.setHours(0, 0, 0, 0) >= start.setHours(0, 0, 0, 0);
                    const isBeforeEnd = !end || orderDate.setHours(23, 59, 59, 999) <= end.setHours(23, 59, 59, 999);

                    return isAfterStart && isBeforeEnd;
                });
            }

            if (filteredOrders.length === 0) {
                document.getElementById("orderTableBody").innerHTML = `<tr><td colspan="7">沒有找到匹配的訂單</td></tr>`;
                return;
            }

            allOrders = filteredOrders;
            currentPage = 1;
            updatePagination();
        }

        document.addEventListener("DOMContentLoaded", function() {
            renderTable();
            renderPagination();
        });

        // 格式化日期的函数
        function formatDate(jsonDate) {
            if (jsonDate.startsWith("/Date(") && jsonDate.endsWith(")/")) {
                const milliseconds = parseInt(jsonDate.substring(6, jsonDate.length - 2), 10);
                const date = new Date(milliseconds);

                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从0开始，需要加1
                const day = String(date.getDate()).padStart(2, '0'); // 確保日期有兩位數
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');

                return `${year}/${month}/${day} ${hours}:${minutes}`;
            }

            return jsonDate; // 如果不是 /Date()/ 格式，則直接返回
        }

        function toggleBlacklist() {
            const isBlacklisted = document.getElementById('blacklistCheckbox').checked;
            const memberId = $('#modalMemberName').data('member-id');  // 获取MemberID

           $.ajax({
            url: '@Url.Action("ToggleBlacklist", "Orderlist")',  // 指向控制器中的 ToggleBlacklist 方法
            type: 'POST',
            data: {
                memberId: memberId,  // 使用获取到的 MemberID
                isBlacklisted: isBlacklisted
            },
            success: function (response) {
                if (response.success) {
                    // 使用 SweetAlert 顯示成功訊息，並自動消失
                    Swal.fire({
                        icon: 'success',
                        title: '黑名單狀態已更新',
                        showConfirmButton: false,
                        timer: 1500 // 1.5秒後自動消失
                    });
                } else {
                    // 使用 SweetAlert 顯示失敗訊息，並自動消失
                    Swal.fire({
                        icon: 'error',
                        title: '更新失敗',
                        text: '更新失敗: ' + response.message,
                        showConfirmButton: false,
                        timer: 1500 // 1.5秒後自動消失
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error(xhr, status, error);
                // 使用 SweetAlert 顯示錯誤訊息，並自動消失
                Swal.fire({
                    icon: 'error',
                    title: '錯誤',
                    text: '更新黑名單狀態時發生錯誤',
                    showConfirmButton: false,
                    timer: 1500 // 1.5秒後自動消失
                });
            }
        });

        }




    </script>
}
